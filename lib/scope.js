// Generated by CoffeeScript 1.9.2
(function() {
  var Scope, extend, last, ref;

  ref = require('./helpers'), extend = ref.extend, last = ref.last;

  exports.Scope = Scope = (function() {
    Scope.root = null;

    function Scope(parent, expressions, method) {
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.variables = [];
      this.positions = {};
      if (!this.parent) {
        Scope.root = this;
      }
    }

    Scope.prototype.hasNoLocals = function() {
      var v;
      return ((function() {
        var i, len, ref1, results;
        ref1 = this.variables;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          v = ref1[i];
          if (v.type !== 'param') {
            results.push(v);
          }
        }
        return results;
      }).call(this)).length === 0;
    };

    Scope.prototype.add = function(name, type, immediate) {
      if (this.shared && (this.undeclared || !immediate) && type !== 'param') {
        return this.parent.add(name, type, immediate);
      } else if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
        return this.variables[this.positions[name]].type = type;
      } else {
        return this.positions[name] = this.variables.push({
          name: name,
          type: type
        }) - 1;
      }
    };

    Scope.prototype.namedMethod = function() {
      var ref1;
      if (((ref1 = this.method) != null ? ref1.isMethod : void 0) || !this.parent) {
        return this.method;
      }
      return this.parent.namedMethod();
    };

    Scope.prototype.find = function(name) {
      if (this.check(name)) {
        return true;
      }
      this.add(name, 'var');
      return false;
    };

    Scope.prototype.parameter = function(name) {
      if (this.shared && this.parent.check(name, true)) {
        return;
      }
      return this.add(name, 'param');
    };

    Scope.prototype.check = function(name) {
      var ref1;
      return !!(this.type(name) || ((ref1 = this.parent) != null ? ref1.check(name) : void 0));
    };

    Scope.prototype.temporary = function(name, index) {
      if (name.length > 1) {
        return '_' + name + (index > 1 ? index - 1 : '');
      } else {
        return '_' + (index + parseInt(name, 36)).toString(36).replace(/\d/g, 'a');
      }
    };

    Scope.prototype.type = function(name) {
      var i, len, ref1, v;
      ref1 = this.variables;
      for (i = 0, len = ref1.length; i < len; i++) {
        v = ref1[i];
        if (v.name === name) {
          return v.type;
        }
      }
      return null;
    };

    Scope.prototype.freeVariable = function(name, reserve) {
      var index, temp;
      if (reserve == null) {
        reserve = true;
      }
      index = 0;
      while (this.check((temp = this.temporary(name, index)))) {
        index++;
      }
      if (reserve) {
        this.add(temp, 'var', true);
      }
      return temp;
    };

    Scope.prototype.assign = function(name, value) {
      this.add(name, {
        value: value,
        assigned: true
      }, true);
      return this.hasAssignments = true;
    };

    Scope.prototype.hasDeclarations = function() {
      return !!this.declaredVariables().length;
    };

    Scope.prototype.declaredVariables = function() {
      var i, len, realVars, ref1, tempVars, v;
      realVars = [];
      tempVars = [];
      ref1 = this.variables;
      for (i = 0, len = ref1.length; i < len; i++) {
        v = ref1[i];
        if (v.type === 'var') {
          (v.name.charAt(0) === '_' ? tempVars : realVars).push(v.name);
        }
      }
      return realVars.sort().concat(tempVars.sort());
    };

    Scope.prototype.assignedVariables = function() {
      var i, len, ref1, results, v;
      ref1 = this.variables;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        v = ref1[i];
        if (v.type.assigned) {
          results.push(v.name + " = " + v.type.value);
        }
      }
      return results;
    };

    return Scope;

  })();

}).call(this);

//# sourceMappingURL=scope.js.map
