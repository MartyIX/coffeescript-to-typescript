// Generated by CoffeeScript 1.9.2
(function() {
  var Access, Base, Block, Call, Class, Code, ES5For, For, LEVEL_TOP, Literal, Param, Return, Transformer, UseES5MethodsInsteadOfForLoops, Value, any, apply, ref, toSAST, underscore,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  underscore = require('underscore');

  ref = require('./nodes'), Base = ref.Base, Return = ref.Return, Call = ref.Call, Code = ref.Code, Param = ref.Param, Class = ref.Class, Block = ref.Block, For = ref.For, Value = ref.Value, Access = ref.Access, Literal = ref.Literal, any = ref.any, LEVEL_TOP = ref.LEVEL_TOP;

  Transformer = (function() {
    function Transformer() {
      this.runOn = bind(this.runOn, this);
    }

    Transformer.prototype.on = function(node) {
      return true;
    };

    Transformer.prototype.stopOn = function(node) {
      return false;
    };

    Transformer.prototype.map = function(node) {};

    Transformer.prototype.transform = function(node) {
      this.map(node);
      return node;
    };

    Transformer.prototype.runOn = function(node) {
      var attr, i, len, ref1;
      if (node instanceof Base) {
        if (this.stopOn && this.stopOn(node)) {
          return node;
        }
        ref1 = node.children;
        for (i = 0, len = ref1.length; i < len; i++) {
          attr = ref1[i];
          if (node[attr]) {
            node[attr] = this.runOn(node[attr]);
          }
        }
        if (!this.on || this.on(node)) {
          return this.transform(node);
        }
        return node;
      } else if (node instanceof Array) {
        return node.map((function(_this) {
          return function(e) {
            return _this.runOn(e);
          };
        })(this));
      } else {
        throw "internal compiler error";
      }
    };

    return Transformer;

  })();

  apply = function(transformers) {
    return function(node) {
      var i, len, transformer;
      for (i = 0, len = transformers.length; i < len; i++) {
        transformer = transformers[i];
        node = new transformer().runOn(node);
      }
      return node;
    };
  };

  UseES5MethodsInsteadOfForLoops = (function(superClass) {
    extend(UseES5MethodsInsteadOfForLoops, superClass);

    function UseES5MethodsInsteadOfForLoops() {
      this.transform = bind(this.transform, this);
      this.on = bind(this.on, this);
      return UseES5MethodsInsteadOfForLoops.__super__.constructor.apply(this, arguments);
    }

    UseES5MethodsInsteadOfForLoops.prototype.on = function(f) {
      return f instanceof For && !(f.index || f.object || f.step || f.pattern || f.jumps() || f.contains(function(n) {
        return n.match([
          new Literal("continue"), new Literal("break"), function() {
            return true;
          }, any, function() {
            return false;
          }
        ]);
      }));
    };

    UseES5MethodsInsteadOfForLoops.prototype.transform = function(f) {
      var comprehension, mkLam, mkMCall;
      mkMCall = function(obj, meth, args) {
        return new Call(new Value(obj, [new Access(new Literal(meth))]), args);
      };
      mkLam = function(exprs) {
        var lam;
        lam = new Code([new Param(f.name)], Block.wrap([exprs]), 'boundfunc');
        lam.undeclaredScope = lam.sharedScope = true;
        return lam;
      };
      if (!f.guard) {
        comprehension = f.source;
      } else {
        comprehension = mkMCall(f.source, "filter", [mkLam(Block.wrap([new Return(f.guard)]))]);
      }
      return new ES5For(comprehension, f.name, f.body);
    };

    return UseES5MethodsInsteadOfForLoops;

  })(Transformer);

  ES5For = (function(superClass) {
    extend(ES5For, superClass);

    function ES5For(loopSource, name, body) {
      this.loopSource = loopSource;
      this.forBody = new Code([new Param(name)], Block.wrap([body]), 'boundfunc');
      this.forBody.undeclaredScope = this.forBody.sharedScope = true;
      ES5For.__super__.constructor.call(this, new Value(this.loopSource, [new Access(new Literal("map"))]), [this.forBody]);
    }

    ES5For.prototype.compileNode = function(o) {
      if (o.level !== LEVEL_TOP) {
        return ES5For.__super__.compileNode.apply(this, arguments);
      }
      return new Call(new Value(this.loopSource, [new Access(new Literal("forEach"))]), [this.forBody]).compileNode(o);
    };

    return ES5For;

  })(Call);

  exports.toSAST = toSAST = apply([UseES5MethodsInsteadOfForLoops]);

}).call(this);

//# sourceMappingURL=transformer.js.map
